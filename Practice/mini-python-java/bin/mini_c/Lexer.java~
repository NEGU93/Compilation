/* The following code was generated by JFlex 1.6.1 */

package mini_c;

import java_cup.runtime.*;
import static mini_c.sym.*;


/**
<<<<<<< HEAD
 * This class is a scanner generated by
=======
 * This class is a scanner generated by 
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
<<<<<<< HEAD
  private static final String ZZ_CMAP_PACKED =
=======
  private static final String ZZ_CMAP_PACKED = 
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
    "\11\0\1\1\1\25\1\26\1\26\1\25\22\0\1\1\1\16\2\0"+
    "\1\10\1\0\1\23\1\12\1\36\1\37\1\14\1\21\1\43\1\22"+
    "\1\0\1\13\1\2\7\3\2\6\1\0\1\42\1\17\1\15\1\20"+
    "\2\0\32\11\4\5\1\11\1\5\2\11\1\50\1\11\1\31\1\30"+
    "\1\10\1\35\1\27\2\10\1\32\1\10\1\47\1\52\2\10\1\44"+
    "\1\33\1\45\1\46\1\10\1\34\1\4\1\10\1\51\1\40\1\24"+
    "\1\41\7\0\1\26\34\0\4\10\4\0\1\10\12\0\1\10\4\0"+
    "\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0"+
    "\5\10\7\0\1\10\1\0\1\10\201\0\5\10\1\0\2\10\2\0"+
    "\4\10\10\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0"+
    "\123\10\1\0\213\10\10\0\236\10\11\0\46\10\2\0\1\10\7\0"+
    "\47\10\7\0\1\10\100\0\33\10\5\0\3\10\30\0\1\10\24\0"+
    "\53\10\25\0\12\7\4\0\2\10\1\0\143\10\1\0\1\10\17\0"+
    "\2\10\7\0\2\10\12\7\3\10\2\0\1\10\20\0\1\10\1\0"+
    "\36\10\35\0\131\10\13\0\1\10\16\0\12\7\41\10\11\0\2\10"+
    "\4\0\1\10\5\0\26\10\4\0\1\10\11\0\1\10\3\0\1\10"+
    "\27\0\31\10\107\0\1\10\1\0\13\10\127\0\66\10\3\0\1\10"+
    "\22\0\1\10\7\0\12\10\4\0\12\7\1\0\7\10\1\0\7\10"+
    "\5\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10"+
    "\3\0\4\10\3\0\1\10\20\0\1\10\15\0\2\10\1\0\3\10"+
    "\4\0\12\7\4\10\7\0\1\10\11\0\6\10\4\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\37\0"+
    "\4\10\1\0\1\10\7\0\12\7\2\0\3\10\20\0\11\10\1\0"+
    "\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0"+
    "\1\10\22\0\1\10\17\0\2\10\4\0\12\7\1\0\1\10\23\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\7\1\0"+
    "\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0"+
    "\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0"+
    "\14\10\26\0\1\10\25\0\12\7\11\0\1\10\13\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10\32\0"+
    "\2\10\6\0\2\10\4\0\12\7\25\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\3\0\1\10\40\0\1\10\1\0"+
    "\2\10\4\0\12\7\1\0\2\10\22\0\10\10\1\0\3\10\1\0"+
    "\51\10\2\0\1\10\20\0\1\10\21\0\2\10\4\0\12\7\12\0"+
    "\6\10\5\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0"+
    "\7\10\37\0\12\7\21\0\60\10\1\0\2\10\13\0\10\10\11\0"+
    "\12\7\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0"+
    "\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0"+
    "\1\10\2\0\2\10\1\0\4\10\1\0\2\10\11\0\1\10\2\0"+
    "\5\10\1\0\1\10\11\0\12\7\2\0\4\10\40\0\1\10\37\0"+
    "\12\7\26\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0"+
    "\1\10\12\7\6\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10"+
    "\7\0\3\10\4\0\15\10\14\0\1\10\1\0\12\7\6\0\46\10"+
    "\1\0\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10"+
    "\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10\45\0\20\10"+
    "\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10"+
    "\3\0\3\10\17\0\15\10\1\0\4\10\16\0\22\10\16\0\22\10"+
    "\16\0\15\10\1\0\3\10\17\0\64\10\43\0\1\10\3\0\2\10"+
    "\3\0\12\7\46\0\12\7\6\0\130\10\10\0\51\10\1\0\1\10"+
    "\5\0\106\10\12\0\35\10\51\0\12\7\36\10\2\0\5\10\13\0"+
    "\54\10\25\0\7\10\10\0\12\7\46\0\27\10\11\0\65\10\53\0"+
    "\12\7\6\0\12\7\15\0\1\10\135\0\57\10\21\0\7\10\4\0"+
    "\12\7\51\0\36\10\15\0\2\10\12\7\54\10\32\0\44\10\34\0"+
    "\12\7\3\0\3\10\12\7\44\10\153\0\4\10\1\0\4\10\3\0"+
    "\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0"+
    "\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0"+
    "\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0"+
    "\7\10\53\0\1\26\1\26\25\0\2\10\23\0\1\10\34\0\1\10"+
    "\15\0\1\10\20\0\15\10\3\0\33\10\107\0\1\10\4\0\1\10"+
    "\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10"+
    "\4\0\1\10\21\0\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10"+
    "\6\0\4\10\3\0\2\10\14\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\70\10\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\120\0\1\10\u01d5\0\3\10\31\0\11\10\7\0\5\10"+
    "\2\0\5\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10"+
    "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10"+
    "\12\7\2\10\24\0\57\10\20\0\31\10\10\0\120\10\47\0\11\10"+
    "\2\0\147\10\2\0\4\10\1\0\4\10\14\0\13\10\115\0\12\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\25\0\1\10\7\0\64\10"+
    "\16\0\62\10\34\0\12\7\30\0\6\10\3\0\1\10\4\0\12\7"+
    "\34\10\12\0\27\10\31\0\35\10\7\0\57\10\34\0\1\10\12\7"+
    "\26\0\12\7\6\0\51\10\27\0\3\10\1\0\10\10\4\0\12\7"+
    "\6\0\27\10\3\0\1\10\5\0\60\10\1\0\1\10\3\0\2\10"+
    "\2\0\5\10\2\0\1\10\1\0\1\10\30\0\3\10\2\0\13\10"+
    "\7\0\3\10\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10"+
    "\1\0\7\10\221\0\43\10\15\0\12\7\6\0\u2ba4\10\14\0\27\10"+
    "\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10"+
    "\5\0\1\10\1\0\12\10\1\0\15\10\1\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10"+
    "\2\0\66\10\50\0\15\10\66\0\2\10\30\0\3\10\31\0\1\10"+
    "\6\0\5\10\1\0\207\10\7\0\1\10\13\0\12\7\7\0\32\10"+
    "\4\0\1\10\1\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\31\0\14\10"+
    "\1\0\32\10\1\0\23\10\1\0\2\10\1\0\17\10\2\0\16\10"+
    "\42\0\173\10\105\0\65\10\u010b\0\35\10\3\0\61\10\57\0\37\10"+
    "\21\0\33\10\65\0\36\10\2\0\44\10\4\0\10\10\1\0\5\10"+
    "\52\0\236\10\2\0\12\7\u0356\0\6\10\2\0\1\10\1\0\54\10"+
    "\1\0\2\10\3\0\1\10\2\0\27\10\252\0\26\10\12\0\32\10"+
    "\106\0\70\10\6\0\2\10\100\0\1\10\17\0\4\10\1\0\3\10"+
    "\1\0\33\10\54\0\35\10\203\0\66\10\12\0\26\10\12\0\23\10"+
    "\215\0\111\10\u03ba\0\65\10\56\0\12\7\23\0\55\10\40\0\31\10"+
    "\7\0\12\7\11\0\44\10\17\0\12\7\103\0\60\10\16\0\4\10"+
    "\13\0\12\7\u0116\0\12\7\u01d6\0\12\7\u0176\0\12\7\46\0\53\10"+
    "\25\0\12\7\u0216\0\12\7\u0716\0\u036f\10\221\0\143\10\u0b9d\0\u042f\10"+
    "\u33d1\0\u0239\10\47\0\12\7\346\0\12\7\u03a6\0\105\10\13\0\1\10"+
    "\102\0\15\10\u4060\0\2\10\u23fe\0\125\10\1\0\107\10\1\0\2\10"+
    "\2\0\1\10\2\0\2\10\2\0\4\10\1\0\14\10\1\0\1\10"+
    "\1\0\7\10\1\0\101\10\1\0\4\10\2\0\10\10\1\0\7\10"+
    "\1\0\34\10\1\0\4\10\1\0\5\10\1\0\1\10\3\0\7\10"+
    "\1\0\u0154\10\2\0\31\10\1\0\31\10\1\0\37\10\1\0\31\10"+
    "\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10"+
    "\1\0\31\10\1\0\10\10\2\0\62\7\u1600\0\4\10\1\0\33\10"+
    "\1\0\2\10\1\0\1\10\2\0\1\10\1\0\12\10\1\0\4\10"+
    "\1\0\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\2\10\1\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\1\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10"+
    "\1\0\1\10\1\0\12\10\1\0\21\10\5\0\3\10\1\0\5\10"+
    "\1\0\21\10\u1144\0\ua6d7\10\51\0\u1035\10\13\0\336\10\u3fe2\0\u021e\10"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

<<<<<<< HEAD
  /**
=======
  /** 
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\1\4\4"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\4\1\23"+
    "\2\0\1\2\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\6\4\1\34\1\4\1\0\1\35"+
    "\5\4\1\2\1\36\6\4\1\37\1\4\1\40\1\41"+
    "\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\53\0\u0158\0\u0183\0\u01ae\0\u01d9\0\53\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\53\0\53\0\53"+
    "\0\53\0\53\0\53\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\53\0\53\0\53\0\53\0\53\0\53\0\53"+
    "\0\327\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0387"+
    "\0\53\0\u0535\0\327\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\53\0\327\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\327\0\u0739\0\327\0\327\0\327";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\5\1\2"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\3\1\0\1\22\1\6"+
    "\1\23\1\6\1\24\1\25\1\6\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\6\6\54\0\1\3\23\0"+
    "\1\3\27\0\2\35\1\36\50\0\2\5\2\0\2\5"+
    "\45\0\3\6\1\0\4\6\15\0\7\6\6\0\7\6"+
    "\4\0\1\37\3\0\2\37\15\0\7\37\6\0\7\37"+
    "\13\0\1\40\1\41\53\0\1\42\52\0\1\43\52\0"+
    "\1\44\52\0\1\45\55\0\1\46\55\0\1\47\53\0"+
    "\1\50\30\0\3\6\1\0\4\6\15\0\1\6\1\51"+
    "\5\6\6\0\3\6\1\52\3\6\2\0\3\6\1\0"+
    "\4\6\15\0\3\6\1\53\3\6\6\0\7\6\2\0"+
    "\3\6\1\0\4\6\15\0\1\54\6\6\6\0\1\6"+
    "\1\55\5\6\2\0\3\6\1\0\4\6\15\0\6\6"+
    "\1\56\6\0\7\6\2\0\3\6\1\0\4\6\15\0"+
    "\2\6\1\57\4\6\6\0\7\6\2\0\2\35\51\0"+
    "\2\60\1\0\2\60\2\0\1\60\16\0\2\60\16\0"+
    "\1\60\14\0\1\61\40\0\25\40\2\0\24\40\14\41"+
    "\1\62\36\41\2\0\3\6\1\0\4\6\15\0\7\6"+
    "\6\0\1\6\1\63\5\6\2\0\3\6\1\0\4\6"+
    "\15\0\4\6\1\64\2\6\6\0\7\6\2\0\3\6"+
    "\1\0\4\6\15\0\7\6\6\0\5\6\1\65\1\6"+
    "\2\0\3\6\1\0\4\6\15\0\7\6\6\0\1\66"+
    "\6\6\2\0\3\6\1\0\4\6\15\0\1\67\6\6"+
    "\6\0\7\6\2\0\3\6\1\0\4\6\15\0\7\6"+
    "\6\0\1\6\1\70\5\6\13\41\1\71\1\62\36\41"+
    "\2\0\3\6\1\0\4\6\15\0\2\6\1\72\4\6"+
    "\6\0\7\6\2\0\3\6\1\0\4\6\15\0\2\6"+
    "\1\73\4\6\6\0\7\6\2\0\3\6\1\0\4\6"+
    "\15\0\7\6\6\0\2\6\1\74\4\6\2\0\3\6"+
    "\1\0\4\6\15\0\3\6\1\75\3\6\6\0\7\6"+
    "\2\0\3\6\1\0\4\6\15\0\7\6\6\0\2\6"+
    "\1\76\4\6\2\0\3\6\1\0\4\6\15\0\7\6"+
    "\6\0\6\6\1\77\2\0\3\6\1\0\4\6\15\0"+
    "\7\6\6\0\4\6\1\100\2\6\2\0\3\6\1\0"+
    "\4\6\15\0\2\6\1\101\4\6\6\0\7\6\2\0"+
    "\3\6\1\0\4\6\15\0\7\6\6\0\1\102\6\6"+
    "\2\0\3\6\1\0\4\6\15\0\1\6\1\103\5\6"+
    "\6\0\7\6\2\0\3\6\1\0\4\6\15\0\7\6"+
    "\6\0\1\6\1\104\5\6\2\0\3\6\1\0\4\6"+
    "\15\0\7\6\6\0\3\6\1\105\3\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\4\1\1\11\7\1\6\11"+
    "\2\1\2\0\1\1\1\0\7\11\10\1\1\11\1\0"+
    "\6\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/* No need for preamble in JAVA */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2350) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
<<<<<<< HEAD
   * @param reader   the new input stream
=======
   * @param reader   the new input stream 
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
<<<<<<< HEAD

=======
    
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
<<<<<<< HEAD
          case 1:
            { throw new Exception(String.format("Error in line %d, column %d: illegal character '%s'\n", yyline, yycolumn, yytext()));
            }
          case 35: break;
          case 2:
            { /* DO NOTHING */
            }
          case 36: break;
          case 3:
            { return new Symbol(CST, yyline, yycolumn, new Constant(Integer.parseInt(yytext())));
            }
          case 37: break;
          case 4:
            { return new Symbol(IDENT, yyline, yycolumn, yytext());
            }
          case 38: break;
          case 5:
            { return new Symbol(DIV, yyline, yycolumn);
            }
          case 39: break;
          case 6:
            { return new Symbol(TIMES, yyline, yycolumn);
            }
          case 40: break;
          case 7:
            { return new Symbol(EQUAL, yyline, yycolumn);
            }
          case 41: break;
          case 8:
            { return new Symbol(NOT, yyline, yycolumn);
            }
          case 42: break;
          case 9:
            { return new Symbol(CMP, yyline, yycolumn, Binop.Blt);
            }
          case 43: break;
          case 10:
            { return new Symbol(CMP, yyline, yycolumn, Binop.Bgt);
            }
          case 44: break;
          case 11:
            { return new Symbol(PLUS, yyline, yycolumn);
            }
          case 45: break;
          case 12:
            { return new Symbol(MINUS, yyline, yycolumn);
            }
          case 46: break;
          case 13:
            { return new Symbol(LPAR, yyline, yycolumn);
            }
          case 47: break;
          case 14:
            { return new Symbol(RPAR, yyline, yycolumn);
            }
          case 48: break;
          case 15:
            { return new Symbol(LB, yyline, yycolumn);
            }
          case 49: break;
          case 16:
            { return new Symbol(RB, yyline, yycolumn);
            }
          case 50: break;
          case 17:
            { return new Symbol(SEMICOLON, yyline, yycolumn);
            }
          case 51: break;
          case 18:
            { return new Symbol(COMMA, yyline, yycolumn);
            }
          case 52: break;
          case 19:
            { return new Symbol(CST, yyline, yycolumn, new Constant(Integer.parseInt(yytext(), 8)));
            }
          case 53: break;
          case 20:
            { return new Symbol(CMP, yyline, yycolumn, Binop.Beqeq);
            }
          case 54: break;
          case 21:
            { return new Symbol(CMP, yyline, yycolumn, Binop.Bneq);
            }
          case 55: break;
          case 22:
            { return new Symbol(CMP, yyline, yycolumn, Binop.Ble);
            }
          case 56: break;
          case 23:
            { return new Symbol(CMP, yyline, yycolumn, Binop.Bge);
            }
          case 57: break;
          case 24:
            { return new Symbol(ARROW, yyline, yycolumn);
            }
          case 58: break;
          case 25:
            { return new Symbol(AND, yyline, yycolumn);
            }
          case 59: break;
          case 26:
            { return new Symbol(OR, yyline, yycolumn);
            }
          case 60: break;
          case 27:
            { return new Symbol(IF);
            }
          case 61: break;
          case 28:
            { return new Symbol(CST, yyline, yycolumn, new Constant(Integer.decode(yytext())));
            }
          case 62: break;
          case 29:
            { return new Symbol(INT, yyline, yycolumn);
            }
          case 63: break;
          case 30:
            { return new Symbol(ELSE);
            }
          case 64: break;
          case 31:
            { return new Symbol(WHILE);
            }
          case 65: break;
          case 32:
            { return new Symbol(SIZEOF, yyline, yycolumn);
            }
          case 66: break;
          case 33:
            { return new Symbol(STRUCT, yyline, yycolumn);
            }
          case 67: break;
          case 34:
=======
          case 1: 
            { throw new Exception(String.format("Error in line %d, column %d: illegal character '%s'\n", yyline, yycolumn, yytext()));
            }
          case 35: break;
          case 2: 
            { /* DO NOTHING */
            }
          case 36: break;
          case 3: 
            { return new Symbol(CST, yyline, yycolumn, new Constant(Integer.parseInt(yytext())));
            }
          case 37: break;
          case 4: 
            { return new Symbol(IDENT, yyline, yycolumn, yytext());
            }
          case 38: break;
          case 5: 
            { return new Symbol(DIV, yyline, yycolumn);
            }
          case 39: break;
          case 6: 
            { return new Symbol(TIMES, yyline, yycolumn);
            }
          case 40: break;
          case 7: 
            { return new Symbol(EQUAL, yyline, yycolumn);
            }
          case 41: break;
          case 8: 
            { return new Symbol(NOT, yyline, yycolumn);
            }
          case 42: break;
          case 9: 
            { return new Symbol(CMP, yyline, yycolumn, Binop.Blt);
            }
          case 43: break;
          case 10: 
            { return new Symbol(CMP, yyline, yycolumn, Binop.Bgt);
            }
          case 44: break;
          case 11: 
            { return new Symbol(PLUS, yyline, yycolumn);
            }
          case 45: break;
          case 12: 
            { return new Symbol(MINUS, yyline, yycolumn);
            }
          case 46: break;
          case 13: 
            { return new Symbol(LPAR, yyline, yycolumn);
            }
          case 47: break;
          case 14: 
            { return new Symbol(RPAR, yyline, yycolumn);
            }
          case 48: break;
          case 15: 
            { return new Symbol(LB, yyline, yycolumn);
            }
          case 49: break;
          case 16: 
            { return new Symbol(RB, yyline, yycolumn);
            }
          case 50: break;
          case 17: 
            { return new Symbol(SEMICOLON, yyline, yycolumn);
            }
          case 51: break;
          case 18: 
            { return new Symbol(COMMA, yyline, yycolumn);
            }
          case 52: break;
          case 19: 
            { return new Symbol(CST, yyline, yycolumn, new Constant(Integer.parseInt(yytext(), 8)));
            }
          case 53: break;
          case 20: 
            { return new Symbol(CMP, yyline, yycolumn, Binop.Beqeq);
            }
          case 54: break;
          case 21: 
            { return new Symbol(CMP, yyline, yycolumn, Binop.Bneq);
            }
          case 55: break;
          case 22: 
            { return new Symbol(CMP, yyline, yycolumn, Binop.Ble);
            }
          case 56: break;
          case 23: 
            { return new Symbol(CMP, yyline, yycolumn, Binop.Bge);
            }
          case 57: break;
          case 24: 
            { return new Symbol(ARROW, yyline, yycolumn);
            }
          case 58: break;
          case 25: 
            { return new Symbol(AND, yyline, yycolumn);
            }
          case 59: break;
          case 26: 
            { return new Symbol(OR, yyline, yycolumn);
            }
          case 60: break;
          case 27: 
            { return new Symbol(IF);
            }
          case 61: break;
          case 28: 
            { return new Symbol(CST, yyline, yycolumn, new Constant(Integer.decode(yytext())));
            }
          case 62: break;
          case 29: 
            { return new Symbol(INT, yyline, yycolumn);
            }
          case 63: break;
          case 30: 
            { return new Symbol(ELSE);
            }
          case 64: break;
          case 31: 
            { return new Symbol(WHILE);
            }
          case 65: break;
          case 32: 
            { return new Symbol(SIZEOF, yyline, yycolumn);
            }
          case 66: break;
          case 33: 
            { return new Symbol(STRUCT, yyline, yycolumn);
            }
          case 67: break;
          case 34: 
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
            { return new Symbol(RETURN, yyline, yycolumn);
            }
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException, Exception {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
<<<<<<< HEAD
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
=======
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
>>>>>>> 527c37bbfd643fb8e6c67ab49712e476e0fa1e11
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
